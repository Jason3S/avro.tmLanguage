import idl "Hello.avdl"; // Test circular import.

/**
 * An example protocol in Avro IDL.
 *
 * Inspired by the Avro specification IDL page:
 * https://avro.apache.org/docs/current/idl.html#example
 *
 * Note: this is not considered to be a valid .avdl file
 * Its purpose is to help with the tmLanguage definition
 *
 */
@namespace("org.apache.avro.test")
protocol Simple {

  /** An enum. */
  @aliases(["org.foo.KindOf"])
  enum Kind {
    FOO,
    BAR, // the bar enum value
    BAZ
  }

  /** A fixed. */
  fixed MD5(16);

  /** A record. */
  record TestRecord {
    @foo("first and last")
    string @order("ignore") name;

    Kind @order("descending") kind;

    MD5 hash;

    /** A field. */
    union { MD5, null} @aliases(["hash"]) nullableHash;

    array<@logicalType("date") long> arrayOfDates;

    map<boolean> someMap = {"true": true};
  }

  record Employee {
    string name;
    boolean active = true;
    long salary;
  }

  error Kaboom {
    string explanation;
    int result_code = -1;
  }

  record Job {
    string jobid;
    date submitDate;
    time_ms submitTime;
    timestamp_ms finishTime;
    decimal(9,2) finishRatio;
  }

  record RecordWithUnion {
    union { null, string } optionalString;
  }

  // Annotations for Ordering and Namespaces
  // Java-style annotations may be used to add additional properties to types and fields throughout Avro IDL.

  // For example, to specify the sort order of a field within a record, one may use the @order annotation before the field name as follows:

  record MyRecord {
    string @order("ascending") myAscendingSortField;
    string @order("descending")  myDescendingField;
    string @order("ignore") myIgnoredField;
    RecordWithUnion rWithUnion;
  }

  // A field's type may also be preceded by annotations, e.g.:

  record MyRecord {
    @java-class("java.util.ArrayList") array<string> myStrings;
  }

  // This can be used to support java classes that can be serialized/deserialized via their toString/String constructor, e.g.:

  record MyRecord {
    @java-class("java.math.BigDecimal") string value;
    @java-key-class("java.io.File") map<string> fileStates;
    array<@java-class("java.math.BigDecimal") string> weights;
  }
  // will define a protocol in the firstNamespace namespace. The record Foo will be defined in someOtherNamespace and Bar will be defined in firstNamespace as it inherits its default from its container.

  // Type and field aliases are specified with the @aliases annotation as follows:

  @aliases(["org.old.OldRecord", "org.ancient.AncientRecord"])
  record MyRecord {
    string @aliases(["oldField", "ancientField"]) myNewField;
  }

  // Some annotations like those listed above are handled specially. All other annotations are added as properties to the protocol, message, schema or field.



  @doc("An error.")
  error TestError {
    string message;
  }

  /* Another error (not docstring-ed). */
  error EmptyError {}

  /** An overridden message docstring. */
  string @doc("Greeting.") hello(string greeting = "hi");

  int @doc("Adding.") add(int arg1, int arg2 = 5);

  /** Echoing. */
  bytes echoBytes(bytes data);

  TestRecord /** Ignored. */ echo(TestRecord `record`);
  void `error`() throws TestError;
  string `errors`() throws TestError, EmptyError;
  void ping() oneway;
  void pong();
}


// Similarly, a @namespace annotation may be used to modify the namespace when defining a named schema. For example:

@namespace("org.apache.avro.firstNamespace")
protocol MyProto {
  @namespace("org.apache.avro.someOtherNamespace")
  record Foo {}

  record Bar {}
}
